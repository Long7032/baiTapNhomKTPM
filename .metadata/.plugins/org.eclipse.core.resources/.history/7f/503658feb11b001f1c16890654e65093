package com.example.demo.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.HashOperations;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entity.Account;
import com.example.demo.repository.AccountRepository;
import com.example.demo.util.JWTUtil;

@RequestMapping("/api/v3")
@RestController
public class AccountController {
	@Autowired
	private JWTUtil jwtUtil;
	@Autowired
	private RedisTemplate template;
	@Autowired
	private AccountRepository accountRepository;
	private String token;
	Bucket bucket = Bucket4j.builder()
	        .addLimit(Bandwidth.classic(100, Refill.intervally(100, Duration.ofMinutes(1))))
	        .build();

	@RequestMapping("/AddAccount")
	public String AddAccount(@RequestBody Account account) {
		// TODO: process POST request
		accountRepository.save(account);
		System.out.println("Add successfull");
		return "Add Account successful";
	}

	@PostMapping("/login")
	public Optional<Account> findOrder(@RequestParam int IdAccount) {
		// TODO: process POST request
		System.out.println(accountRepository.findById(IdAccount));
		token = jwtUtil.generateToken(String.valueOf(IdAccount));
		System.out.println("Token" + token);
		HashOperations hashOperations = template.opsForHash();
		hashOperations.put("token", String.valueOf(IdAccount), token);

		return accountRepository.findById(IdAccount);
	}

	@PostMapping("/findAllAccount")
	public List<Account> findAllAccount() {
		// TODO: process POST request
		System.out.println(accountRepository.findAll());
		;
		return accountRepository.findAll();
	}

}
