package com.example.demo.util;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import net.minidev.json.JSONObject;

import org.springframework.stereotype.Component;

import java.text.ParseException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.nimbusds.jose.*;
import com.nimbusds.jose.crypto.MACSigner;
import com.nimbusds.jose.crypto.MACVerifier;
import com.nimbusds.jwt.JWTClaimsSet;
import com.nimbusds.jwt.SignedJWT;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.text.ParseException;
import java.util.Date;

@Component
public class JWTUtil {
	private final static String SECRET = "hey Mr Tien the secrect length must be at least 256 bits" + " please no reveal!"; // Replace
																														// with
																														// a
																														// secure
																														// secret
																														// key
	private final long EXPIRATION_TIME = 900_000; // 15 minutes

	public String extractUsername(String token) {
		return extractClaim(token, Claims::getSubject);
	}

	public Date extractExpiration(String token) {
		return extractClaim(token, Claims::getExpiration);
	}

	public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
		final Claims claims = extractAllClaims(token);
		return claimsResolver.apply(claims);
	}

	private Claims extractAllClaims(String token) {
		return Jwts.parser().setSigningKey(SECRET).parseClaimsJws(token).getBody();
	}

	public String generateToken(String username) {
		Map<String, Object> claims = new HashMap<>();
		return createToken(claims, username);
	}

	private String createToken(Map<String, Object> claims, String subject) {
		return Jwts.builder()
//                .setClaims(claims)
				.setSubject(subject).setIssuedAt(new Date(System.currentTimeMillis()))
				.setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
				.signWith(SignatureAlgorithm.HS256, SECRET).compact();
	}

	public boolean isTokenExpired(String token) {
		return extractExpiration(token).before(new Date());
	}

	public boolean validateToken(String token
//    		, serDetails userDetails
	) {
		final String username = extractUsername(token);
//        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
		System.out.println("Validate Token: " + username);
		return true;
	}

	// Demo

	public static String createJWT(String userId)
			throws ParseException, JOSEException {
																													// claim
//				.expirationTime(new Date(System.currentTimeMillis() + ttlMillis)).build();
		JWTClaimsSet.Builder builder = new JWTClaimsSet.Builder();

        builder.claim("Khoa", userId);
        builder.expirationTime(new Date(System.currentTimeMillis()+3600));
        JWTClaimsSet claimsSet = builder.build();

        SignedJWT signedJWT = new SignedJWT(new JWSHeader(JWSAlgorithm.HS256), claimsSet);
        JWSSigner signer = new MACSigner(SECRET.getBytes());
        signedJWT.sign(signer);


		// Now you can call supportedJWSAlgorithms()
		System.out.println("Supported algorithms: " + signer.supportedJWSAlgorithms());

		signedJWT.sign(signer); // Replace null with your signing key

		return signedJWT.serialize();
	}

	private JWTClaimsSet getClaimsFromToken(String token) {
		System.out.println("getClaimsFromToken");
		JWTClaimsSet claims = null;
		try {
			SignedJWT signedJWT = SignedJWT.parse(token);
			JWSVerifier verifier = new MACVerifier(SECRET.getBytes());
			if (signedJWT.verify(verifier)) {
				claims = signedJWT.getJWTClaimsSet();
			}
		} catch (ParseException | JOSEException e) {
//            logger.error(e.getMessage());

		}
		System.out.println("TOken");
		System.out.println(token);
		System.out.println(claims);
		System.out.println("End getClaimsFromToken");
		return claims;
	}

	public String getUserFromToken(String token) throws JsonMappingException, JsonProcessingException {
		System.out.println("getUserFromToken");
		System.out.println("TOken");
		System.out.println(token);
//        UserPrincipal user = null;
//        try {
		JWTClaimsSet claims = getClaimsFromToken(token);
//            if (claims != null && isTokenExpired(claims)) {
		JSONObject jsonObject = (JSONObject) claims.getClaim("Khoa");
		System.out.println(claims);
                String rs = new ObjectMapper().readValue(jsonObject.toJSONString(), String.class);
//            }
//        } catch (Exception e) {
//            logger.error(e.getMessage());
//        }
		System.out.println("OKOKOKOKOK");
		return "ok";
	}
}
