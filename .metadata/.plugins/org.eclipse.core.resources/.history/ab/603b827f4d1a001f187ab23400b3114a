package com.example.demo.util;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import net.minidev.json.JSONObject;

import org.springframework.stereotype.Component;

import java.text.ParseException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.nimbusds.jose.*;
import com.nimbusds.jose.crypto.MACSigner;
import com.nimbusds.jose.crypto.MACVerifier;
import com.nimbusds.jwt.JWTClaimsSet;
import com.nimbusds.jwt.SignedJWT;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.text.ParseException;
import java.util.Date;

@Component
public class JWTUtil {
	private final String SECRET = "hey Mr Tien the secrect length must be at least 256 bits" +
            " please no reveal!"; // Replace with a secure secret key
    private final long EXPIRATION_TIME = 900_000; // 15 minutes

    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    private Claims extractAllClaims(String token) {
        return Jwts.parser().setSigningKey(SECRET).parseClaimsJws(token).getBody();
    }

    public String generateToken(String username) {
        Map<String, Object> claims = new HashMap<>();
        return createToken(claims, username);
    }

    private String createToken(Map<String, Object> claims, String subject) {
        return Jwts.builder()
//                .setClaims(claims)
                .setSubject(subject)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
                .signWith(SignatureAlgorithm.HS256, SECRET)
                .compact();
    }

    public boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    public boolean validateToken(String token
//    		, serDetails userDetails
    		) {
        final String username = extractUsername(token);
//        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
        System.out.println("Validate Token: " + username);
        return true;
    }
    
    // Demo
    
    public static String createJWT(String userId, String issuer, String subject, long ttlMillis)
			throws ParseException, JOSEException {
		JWTClaimsSet claimsSet = new JWTClaimsSet.Builder().subject(subject).issuer(issuer).claim("userId", userId) // Custom
																													// claim
				.expirationTime(new Date(System.currentTimeMillis() + ttlMillis)).build();
		SignedJWT signedJWT = new SignedJWT(new JWSHeader(JWSAlgorithm.HS256), claimsSet); // Replace null with your
																							// signing algorithm
		JWSSigner signer = new MACSigner("61 66 35 39 35 62 66 30 36 31 66 63 37 30 64 62");

		// Now you can call supportedJWSAlgorithms()
		System.out.println("Supported algorithms: " + signer.supportedJWSAlgorithms());

		signedJWT.sign(signer); // Replace null with your signing key

		return signedJWT.serialize();
	}

    private JWTClaimsSet getClaimsFromToken(String token) {
        JWTClaimsSet claims = null;
        try {
            SignedJWT signedJWT = SignedJWT.parse(token);
            JWSVerifier verifier = new MACVerifier(SECRET.getBytes());
            if (signedJWT.verify(verifier)) {
                claims = signedJWT.getJWTClaimsSet();
            }
        } catch (ParseException | JOSEException e) {
//            logger.error(e.getMessage());
        	
        }
        return claims;
    }
    
    public String getUserFromToken(String token) {
    	System.out.println("getUserFromToken");
//        UserPrincipal user = null;
        try {
            JWTClaimsSet claims = getClaimsFromToken(token);
//            if (claims != null && isTokenExpired(claims)) {
                JSONObject jsonObject = (JSONObject) claims.getClaim("Khoa");
                System.out.println(jsonObject);
//                user = new ObjectMapper().readValue(jsonObject.toJSONString());
//            }
        } catch (Exception e) {
//            logger.error(e.getMessage());
        }
        return "ok";
    }
}
